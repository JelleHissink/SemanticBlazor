@typeparam ValueType
@typeparam ItemType
@inherits SelectControlsBase.SemSelectControlBase<List<ValueType>, ItemType>

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @foreach (var item in Items)
    {
      <div class="@InputClassMapper.ToString()">
        @if (Value != null && Value.Any(v => GetItemKey(GetItemFromValue(v)) == GetItemKey(item)))
        {
          <input type="checkbox" id="@($"{Id}-{GetItemKey(item)}")" checked="checked" @onchange="(() => CheckedChanged(GetItemKey(item)))" @attributes="disabledAttribute">
        }
        else
        {
          <input type="checkbox" id="@($"{Id}-{GetItemKey(item)}")" @onchange="(() => CheckedChanged(GetItemKey(item)))" @attributes="disabledAttribute">
        }
        <label for="@($"{Id}-{GetItemKey(item)}")">@GetItemText(item)</label>
      </div>
    }
  </div>
}


@code {
  [Parameter] public CheckboxType Type { get; set; } = CheckboxType.Checkbox;
  ClassMapper InputClassMapper { get; set; } = new ClassMapper();

  public virtual Func<ItemType, ValueType> ValueSelector { get; set; }
  protected ItemType GetItemFromValue(ValueType value) => SemDataSelectControlHelper<ValueType, ItemType>.GetItemFromValue(value, Items, ValueSelector);
  protected object ConvertValue(object newValue) => SemDataSelectControlHelper<ValueType, ItemType>.ConvertValue(newValue, Items, ItemKey, ValueSelector);
  protected override string GetItemText(ItemType item) => SemDataSelectControlHelper<ValueType, ItemType>.GetItemText(item, ItemText);
  protected override string GetItemKey(ItemType item) => SemDataSelectControlHelper<ValueType, ItemType>.GetItemKey(item, Items, ItemKey);

  public SemCheckboxListBase()
  {
    ClassMapper
      .Add("ui")
      .Add("checkboxes");

    InputClassMapper
      .Add("ui")
      .If("disabled", () => !this.Enabled)
      .Get(() => Type.ToString().ToLower())
      .Add("checkbox");
  }
  async Task CheckedChanged(object value)
  {
    if (Value == null) Value = new List<ValueType>();
    var _value = default(ValueType);
    if (ValueSelector != null)
    {
      _value = ValueSelector.Invoke(GetItem(value));
    }
    else
    {
      _value = (ValueType)ConvertValue(value);
    }
    if (Value.Contains(_value))
    {
      Value.Remove(_value);
    }
    else
    {
      Value.Add(_value);
    }
    await NotifyChanged();
  }
}
