@typeparam ValueType
@inherits SemSelectControlBase<ValueType>

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @foreach (var item in Items)
    {
      <div class="field">
        <div class="ui radio checkbox">
          @if (Value != null && Value.ToString() == (item.Value ?? item.Text))
          {
            <input type="radio" id="@($"{Id}_{item.Value ?? item.Text}")" checked="checked" @onchange="(() => ButtonClicked(item.Value ?? item.Text))" @attributes="disabledAttribute">
          }
          else
          {
            <input type="radio" id="@($"{Id}_{item.Value ?? item.Text}")" @onchange="(() => ButtonClicked(item.Value ?? item.Text))" @attributes="disabledAttribute">
          }
          <label for="@($"{Id}_{item.Value ?? item.Text}")">@(item.Text ?? item.Value)</label>
        </div>
      </div>
    }
  </div>
}

@code {
  public SemRadioButtonList()
  {
    ClassMapper
      .Add("grouped fields");
  }
  async Task ButtonClicked(string value)
  {
    if (typeof(ValueType).BaseType != null && typeof(ValueType).BaseType == typeof(Enum))
    {
      Value = (ValueType)Enum.Parse(typeof(ValueType), value);
    }
    else
    {
      Value = (ValueType)Convert.ChangeType(value, typeof(ValueType));
    }
    await NotifyChanged();
  }
}
