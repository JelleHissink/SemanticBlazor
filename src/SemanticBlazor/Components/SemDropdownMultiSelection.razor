@typeparam ValueType
@inherits SemDropdownSelection<List<ValueType>>

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    <input type="hidden" value="@stringValue" @onchange="OnValueChanged" />
    @if (!IsButton)
    {
      <i class="dropdown icon"></i>
    }
    @if (IsButton && ButtonIcon != null)
    {
      <SemIcon Icon="ButtonIcon"></SemIcon>
    }
    <div class="default text">@DefaultText</div>
    <div class="menu">
      @foreach (var item in Items)
      {
        <div class="item" data-value="@(item.Value ?? item.Text)">
          @if (ItemTemplate != null)
          {
            @ItemTemplate(item)
          }
          else
          {
            @(item.Text ?? item.Value)
          }
        </div>
      }
    </div>
  </div>
}

@code {
  [Parameter] public int? MaxSelections { get; set; }
  [Parameter] public bool UseLabels { get; set; } = true;
  protected override Dictionary<string, object> initSettings
  {
    get
    {
      var retval = new Dictionary<string, object>();
      retval.Add("fullTextSearch", FullTextSearch ? true : false);
      retval.Add("clearable", Clearable ? true : false);
      retval.Add("allowAdditions", AllowAdditions ? true : false);
      retval.Add("useLabels", !UseLabels || IsButton ? false : true);
      if (MaxSelections != null) retval.Add("maxSelections", MaxSelections);
      return retval;
    }
  }

  public SemDropdownMultiSelection()
  {
    ClassMapper.Add("multiple");
  }
  protected override string stringValue
  {
    get
    {
      if (Value != null)
      {
        return string.Join(",", Value);
      }
      else
      {
        return "";
      }
    }
  }
  protected override List<ValueType> ConvertValue(object newValue)
  {
    var vals = newValue.ToString().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    if (typeof(ValueType).BaseType != null && typeof(ValueType).BaseType == typeof(Enum))
    {
      return vals.Select(e => (ValueType)Enum.Parse(typeof(ValueType), e)).ToList();
    }
    else
    {
      return vals.Select(e => (ValueType)Convert.ChangeType(e, typeof(ValueType))).ToList();
    }
  }
  protected override async Task SetComboboxValue()
  {
    if (Value != null)
    {
      await SemanticBlazor.JsFunc.DropDown.SetExactlyValue(js, Id, stringValue);
    }
    else
    {
      await SemanticBlazor.JsFunc.DropDown.Clear(js, Id);
    }
  }
}
