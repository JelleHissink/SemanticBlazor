@*@typeparam ValueType
@inherits SemDataDropdownControlBase<List<ValueType>, ItemType>
@typeparam ItemType

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    <input type="hidden" value="@stringValue" @onchange="OnValueChanged" />
    @if (Icon != null)
    {
      <SemIcon Icon="@Icon"></SemIcon>
    }
    @if (!IsButton)
    {
      <i class="dropdown icon"></i>
    }
    @if (IsButton && ButtonIcon != null)
    {
      <SemIcon Icon="ButtonIcon"></SemIcon>
    }
    <div class="default text">@DefaultText</div>
    <div class="menu">
      @if (Items != null)
      {
        @foreach (var item in Items)
        {
          <div class="item" data-value="@(GetItemKey(item))">
            @if (ItemTemplate != null)
            {
              @ItemTemplate(item)
            }
            else
            {
              @(GetItemText(item))
            }
          </div>
        }
      }
    </div>
  </div>
}

@code {
  [Parameter] public Func<ItemType, ValueType> ValueSelector { get; set; }
  protected override string stringValue
  {
    get
    {
      if (Value != null)
      {
        return String.Join(",", Value.Select(i => selectControlHelper.GetItemKey(selectControlHelper.GetItemFromValue(i, Items, ValueSelector), Items, ItemKey)));
      }
      else
      {
        return "";
      }
    }
  }
  [Parameter] public int? MaxSelections { get; set; }
  [Parameter] public bool UseLabels { get; set; } = true;

  SemDataSelectControlHelper<ValueType, ItemType> selectControlHelper = new SemDataSelectControlHelper<ValueType, ItemType>();
  protected ItemType GetItemFromValue(ValueType value) => selectControlHelper.GetItemFromValue(value, Items, ValueSelector);
  protected string GetItemText(ItemType item) => selectControlHelper.GetItemText(item, ItemText);
  protected string GetItemKey(ItemType item) => selectControlHelper.GetItemKey(item, Items, ItemKey);

  public SemDataDropdownMultiSelection()
  {
    ClassMapper
      .Add("multiple");

    initSettings.Add("maxSelections", MaxSelections);
    initSettings.Add("UseLabels", UseLabels ? true : false);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await SemanticBlazor.JsFunc.DropDown.Init(js, Id, initSettings);
    }
    await base.OnAfterRenderAsync(firstRender);
  }
  protected override object ConvertValue(object newValue)
  {
    List<ItemType> selectedItems = new List<ItemType>();

    var vals = newValue.ToString().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
    selectedItems.AddRange(Items.Where(i => vals.Any(v => v == GetItemKey(i))));

    if (ValueSelector != null)
    {
      var retval = new List<ValueType>();
      selectedItems.ForEach(i =>
      {
        retval.Add(ValueSelector.Invoke(i));
      });
      return retval;
    }
    else if (typeof(ItemType) == typeof(ListItem))
    {
      if (typeof(ValueType).BaseType != null && typeof(ValueType).BaseType == typeof(Enum))
      {
        return vals.Select(e => (ValueType)Enum.Parse(typeof(ValueType), e)).ToList();
      }
      else
      {
        return vals.Select(e => (ValueType)Convert.ChangeType(e, typeof(ValueType))).ToList();
      }
    }
    else
    {

      try
      {
        return (List<ValueType>)Convert.ChangeType(selectedItems, typeof(List<ValueType>));
      }
      catch (Exception err)
      {
        throw new Exception("Cannot convert selected item to defined ValueType, please specify ValueSelector.", err);
      }
    }
  }
  protected override async Task SetComboboxValue()
  {
    if (Value != null)
    {
      await SemanticBlazor.JsFunc.DropDown.SetExactlyValue(js, Id, stringValue);
    }
    else
    {
      await SemanticBlazor.JsFunc.DropDown.Clear(js, Id);
    }
  }
}*@
