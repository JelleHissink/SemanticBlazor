@typeparam ValueType
@inherits SemSelectControlBase<List<ValueType>>

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @foreach (var item in Items)
    {
      <div class="@InputClassMapper.ToString()">
        @if (Value != null && Value.Any(v => v?.ToString() == (item.Value ?? item.Text)))
        {
          <input type="checkbox" id="@($"{Id}_{item.Value ?? item.Text}")" checked="checked" @onchange="(() => CheckedChanged((item.Value ?? item.Text)))" @attributes="disabledAttribute">
        }
        else
        {
          <input type="checkbox" id="@($"{Id}_{item.Value ?? item.Text}")" @onchange="(() => CheckedChanged((item.Value ?? item.Text)))" @attributes="disabledAttribute">
        }
        <label for="@($"{Id}_{item.Value ?? item.Text}")">@(item.Text ?? item.Value)</label>
      </div>
    }
  </div>
}


@code {
  [Parameter] public CheckboxType Type { get; set; } = CheckboxType.Checkbox;
  ClassMapper InputClassMapper { get; set; } = new ClassMapper();

  public SemCheckboxList()
  {
    ClassMapper
      .Add("ui")
      .Add("checkboxes");

    InputClassMapper
      .Add("ui")
      .If("disabled", () => !this.Enabled)
      .Get(() => Type.ToString().ToLower())
      .Add("checkbox");
  }
  async Task CheckedChanged(string value)
  {
    if (Value == null) Value = new List<ValueType>();
    var _value = default(ValueType);
    if (typeof(ValueType).BaseType != null && typeof(ValueType).BaseType == typeof(Enum))
    {
      _value = (ValueType)Enum.Parse(typeof(ValueType), value.ToString());
    }
    else
    {
      _value = (ValueType)Convert.ChangeType(value, typeof(ValueType));
    }

    if (Value.Contains(_value))
    {
      Value.Remove(_value);
    }
    else
    {
      Value.Add(_value);
    }

    await NotifyChanged();
  }
}
